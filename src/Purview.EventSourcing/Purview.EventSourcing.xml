<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Purview.EventSourcing</name>
    </assembly>
    <members>
        <member name="T:Purview.EventSourcing.Aggregates.AggregateBase">
            <summary>
            A default base-class for create <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>s.
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateBase.#ctor(System.String)">
            <summary>
            Initializes the base-class.
            </summary>
            <param name="aggregateType">Specifes the <see cref="P:Purview.EventSourcing.Aggregates.AggregateBase.AggregateType"/>, if not value is specified
            <see cref="M:System.TypeNameHelper.GetName(System.Type,System.String,System.Boolean)"/> is called, with 'Aggregate' being trimmed if it's a suffix
            of the type na,e.</param>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateBase.AggregateType">
            <inheritdoc/>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateBase.Details">
            <inheritdoc/>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateBase.RegisterEvents">
            <summary>
            Used to register custom <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/>
            implementations using the <see cref="M:Purview.EventSourcing.Aggregates.AggregateBase.Register``1(System.Action{``0})"/>. method.
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateBase.ClearUnsavedEvents(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateBase.GetUnsavedEvents">
            <inheritdoc/>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateBase.HasUnsavedEvents">
            <inheritdoc/>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateBase.CanApplyEvent(Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateBase.RecordAndApply``1(``0)">
            <summary>
            Records an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> in the form of <typeparamref name="TEvent"/>.
            and stores the record ready for saving via the <see cref="M:Purview.EventSourcing.Interfaces.IEventStore`1.SaveAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)"/>
            method. The event is also applied (via <see cref="M:Purview.EventSourcing.Interfaces.Aggregates.IAggregate.ApplyEvent(Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent)"/>) once it's been recorded.
            </summary>
            <typeparam name="TEvent">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> implementation type.</typeparam>
            <param name="event">The event to save.</param>
            <returns>The current <see cref="T:Purview.EventSourcing.Aggregates.AggregateBase"/> instance.</returns>
            <remarks>The <see cref="P:Purview.EventSourcing.Aggregates.Events.AggregateEventDetails.AggregateVersion"/> and <see cref="P:Purview.EventSourcing.Aggregates.Events.AggregateEventDetails.When"/>
            of the <see cref="P:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent.Details"/> property are updated during this operation.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateBase.ForceSave">
            <summary>
            Appies the <see cref="T:Purview.EventSourcing.Aggregates.Events.ForceSaveEvent"/> to the aggregate,
            allowing the aggregate to be saved, regardless of other operations.
            </summary>
            <remarks>This is only applied if <see cref="M:Purview.EventSourcing.Aggregates.AggregateBase.HasUnsavedEvents"/> returns false. This can be useful for situations where
            you need to re-populate a queryable store for example.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateBase.Register``1(System.Action{``0})">
            <summary>
            Registers an <see cref="T:System.Action`1"/> as the handler to apply
            an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/>.
            </summary>
            <typeparam name="TEvent">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> type to register.</typeparam>
            <param name="applier">The action used to apply the event.</param>
            <remarks>The <typeparamref name="TEvent"/> <see cref="P:System.Reflection.MemberInfo.Name"/> of the event <see cref="T:System.Type"/>
            must end with 'Event'.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateBase.Purview#EventSourcing#Interfaces#Aggregates#IAggregate#GetRegisteredEventTypes">
            <inheritdoc/>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateBase.Purview#EventSourcing#Interfaces#Aggregates#IAggregate#ApplyEvent(Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Purview.EventSourcing.Aggregates.AggregateDetails">
            <summary>
            Represents the details of the aggregate.
            </summary>
            <remarks>Valius in this class should not be modified manually.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateDetails.Id">
            <summary>
            Gets the Id of the aggregate.
            </summary>
            <remarks>Once the id is set, it cannot be changed.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateDetails.SnapshotVersion">
            <summary>
            The version of the snapshot that has been saved, if there are any events that are un-saved, or the snapshot doesn't
            contain more recent events then this value may not reflect the latest version of the aggregate.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateDetails.SavedVersion">
            <summary>
            The version of this instance that has been saved to the <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/>.
            </summary>
            <remarks>A value of 0 (zero) indicates that this is a new aggregate.
            
            You can think of this value as the latest saved version. Unlike the <see cref="P:Purview.EventSourcing.Aggregates.AggregateDetails.SnapshotVersion"/>, this
            represents all of the persisted events.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateDetails.CurrentVersion">
            <summary>
            The current version of this instance of the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>,
            taking into account any un-saved events.
            </summary>
            <remarks>While the events maybe unsaved, they are still applied.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateDetails.IsDeleted">
            <summary>
            Indicates if the aggregate is in a deleted state.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateDetails.Etag">
            <summary>
            Get's the Etag that corresponds to the latest serialized version.
            </summary>
            <remarks>This can be useful for caching, including the use of If-Modified headers
            when using HTTP/S clients.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateDetails.Locked">
            <summary>
            Determines if this version of this aggregate is locked from saving, deleting or caching.
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateDetails.Clone">
            <summary>
            Clones the <see cref="T:Purview.EventSourcing.Aggregates.AggregateDetails"/> class to a new instance.
            </summary>
            <returns>A cloned instance of the current <see cref="T:Purview.EventSourcing.Aggregates.AggregateDetails"/>.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateDetails.GetHashCode">
            <summary>
            Generates a hashcode based on the properties of the <see cref="T:Purview.EventSourcing.Aggregates.AggregateDetails"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Purview.EventSourcing.Aggregates.AggregateSaveResult`1">
            <summary>
            Represents the results of a save operation on a <typeparamref name="TAggregate"/>.
            </summary>
            <remarks>
            A save operation could be due to <see cref="M:Purview.EventSourcing.Interfaces.IEventStore`1.SaveAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)"/>,
            <see cref="M:Purview.EventSourcing.Interfaces.IEventStore`1.DeleteAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)" /> or 
            the <see cref="M:Purview.EventSourcing.Interfaces.IEventStore`1.RestoreAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)"/> operations.
            </remarks>
            <typeparam name="TAggregate">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> where a save operations was attempted.</typeparam>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.op_Implicit(Purview.EventSourcing.Aggregates.AggregateSaveResult{`0})~System.Boolean">
            <summary>
            Converts a <see cref="T:Purview.EventSourcing.Aggregates.AggregateSaveResult`1"/> to a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="aggregateSaveResult">The save result to convert.</param>
            <seealso cref="M:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.ToBoolean"/>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.op_Implicit(Purview.EventSourcing.Aggregates.AggregateSaveResult{`0})~`0">
            <summary>
            Converts a <see cref="T:Purview.EventSourcing.Aggregates.AggregateSaveResult`1"/> to an <typeparamref name="TAggregate"/>.
            </summary>
            <param name="aggregateSaveResult">The save result to convert.</param>
            <seealso cref="M:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.ToAggregate"/>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.#ctor(`0,FluentValidation.Results.ValidationResult,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Purview.EventSourcing.Aggregates.AggregateSaveResult`1"/> based on the saved and validation state
            from an <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/>.
            </summary>
            <param name="aggregate">The aggregate that was processed.</param>
            <param name="validationResult">The validation result.</param>
            <param name="saved">Indicates if the operations resulted in a save operation.</param>
            <param name="skipped">Indicates if, while the result of <paramref name="saved"/> maybe true,
            in-fact the results affected no changes.</param>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.Aggregate">
            <summary>
            The <typeparamref name="TAggregate">aggregate</typeparamref> where a save operation
            was attempted.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.ValidationResult">
            <summary>
            The result of the validation.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.IsValid">
            <summary>
            Indicates if the <see cref="P:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.ValidationResult"/>
            denotes failures or success.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.Saved">
            <summary>
            Indicates if the save operation was successful.
            </summary>
            <remarks>A value of false does not always mean failure, it may mean
            there was no events to save, or the events were already saved - in the case
            where idempotency markers are recorded and validated.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.Skipped">
            <summary>
            Indicates the result from a <see cref="M:Purview.EventSourcing.Interfaces.IEventStore`1.SaveAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)"/>
            operation was skipped.
            </summary>
            <remarks>This result is not featured in the ability to convert to a <see cref="T:System.Boolean"/> via <see cref="M:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.ToBoolean"/>
            or the implicit case.
            
            This maybe true when checking idempotency markers, or having not events to save.
            </remarks>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.ToBoolean">
            <summary>
            Converts this <see cref="T:Purview.EventSourcing.Aggregates.AggregateSaveResult`1"/> to a <see cref="T:System.Boolean"/>
            to quickly indicate success or failure of the save operation.
            </summary>
            <returns>Returns true if <see cref="P:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.Saved"/> and <see cref="P:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.IsValid"/> is true,
            otherwise, returns false.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.ToAggregate">
            <summary>
            Converts this <see cref="T:Purview.EventSourcing.Aggregates.AggregateSaveResult`1"/> to an <typeparamref name="TAggregate"/>.
            </summary>
            <returns>Returns the <see cref="P:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.Aggregate"/> instance.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.EnsureValid">
            <summary>
            If <see cref="P:Purview.EventSourcing.Aggregates.AggregateSaveResult`1.IsValid"/> is false, a <see cref="T:FluentValidation.ValidationException"/> is thrown.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.Aggregates.Events.AggregateEventBase">
            <summary>
            Base <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> implementation.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.Events.AggregateEventBase.Details">
            <inheritdoc cref="P:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent.Details"/>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.Events.AggregateEventBase.GetHashCode">
            <summary>
            Gets a hash of the <see cref="T:Purview.EventSourcing.Aggregates.Events.AggregateEventBase"/>.
            </summary>
            <returns>A hash based on the name of the type, and the data.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.Events.AggregateEventBase.BuildEventHash(System.HashCode@)">
             <summary>
             Allows for <see cref="M:Purview.EventSourcing.Aggregates.Events.AggregateEventBase.GetHashCode"/> modifications
             based on the payload of the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/>.
             </summary>
             <returns>A hash based on the current events payload.</returns>
             <example>
             
             public class AnExampleEvent : AggregateEventBase
             {
            		public string? ANullableString { get; set; }
            
            		public string AString { get; set; }
            
            		public int? ANullableInt { get; set; }
            
            		public int AnInt { get; set; }
            
            		public string[]? ANullableStringArray { get; set; }
            
            		public string[] AStringArray { get; set; }
             
            		override protected void BuildEventHash(ref HashCode hash)
            		{
            			hash.Add(ANullableString);
            			hash.Add(AString);
            			hash.Add(ANullableInt);
            			hash.Add(ANullableString);
            			hash.Add(AnInt);
            
            			BuildHash is a helper...
            			ANullableStringArray.BuildHash(ref hash);
            			AStringArray.BuildHash(ref hash);
            		}
             } 
             
             </example>
        </member>
        <member name="T:Purview.EventSourcing.Aggregates.Events.AggregateEventDetails">
            <summary>
            Represents details about the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/>.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.Events.AggregateEventDetails.IdempotencyId">
            <summary>
            The idempotency Id for the operation that resulted in this event being applied.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.Events.AggregateEventDetails.AggregateVersion">
            <summary>
            The version the of the aggregate at the
            time the event was applied.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.Events.AggregateEventDetails.When">
            <summary>
            The <see cref="P:System.DateTimeOffset.UtcNow">UTC date/time</see>
            the owning event was applied.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.Events.AggregateEventDetails.UserId">
            <summary>
            The id of the user that applied this event.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.Events.AggregateEventDetails.ImpersonatedByUserId">
            <summary>
            If the user is being impersonated, this will be the user Id of the user doing the impersonation.
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.Events.AggregateEventDetails.GetHashCode">
            <summary>
            Generates a hashcode based on the properties of the <see cref="T:Purview.EventSourcing.Aggregates.Events.AggregateEventDetails"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Purview.EventSourcing.Aggregates.Events.DeleteAggregateEvent">
            <summary>
            Represents an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> that tracks
            the soft-deleting of an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>.
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.Events.DeleteAggregateEvent.BuildEventHash(System.HashCode@)">
            <inheritdoc />
        </member>
        <member name="T:Purview.EventSourcing.Aggregates.Events.ForceSaveEvent">
            <summary>
            Represents an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> that forces
            the saving an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> when <see cref="M:Purview.EventSourcing.Interfaces.IEventStore`1.SaveAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)"/>
            is called.
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.Events.ForceSaveEvent.BuildEventHash(System.HashCode@)">
            <inheritdoc />
        </member>
        <member name="T:Purview.EventSourcing.Aggregates.Events.RestoreAggregateEvent">
            <summary>
            Represents an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> that tracks
            the restoring of an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> following a soft delete.
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.Events.RestoreAggregateEvent.BuildEventHash(System.HashCode@)">
            <inheritdoc/>
        </member>
        <member name="T:Purview.EventSourcing.Aggregates.Events.UnknownEvent">
            <summary>
            Represents a <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> that is used in-place
            when an existing event could not be deserialized.
            </summary>
            <remarks>This can occur when the aggregate's schema has changed
            and it no long requires an event type, so it's removed.
            
            However, the event data still exists.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.Events.UnknownEvent.Payload">
            <summary>
            Represents the serialized payload that was the
            <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/>.
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.Aggregates.Events.UnknownEvent.BuildEventHash(System.HashCode@)">
            <inheritdoc/>
        </member>
        <member name="T:Purview.EventSourcing.Aggregates.Exceptions.AggregateEventUnregisteredException">
            <summary>
            Indicates an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> was applied to an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>,
            but the event type was unregistered.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.Exceptions.AggregateEventUnregisteredException.Aggregate">
            <summary>
            The aggregate that recieved an unregistered event type.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Aggregates.Exceptions.AggregateEventUnregisteredException.EventType">
            <summary>
            The type of the event.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.Aggregates.Exceptions.AggregateIdAlreadySetException">
            <summary>
            Indicates the <see cref="P:Purview.EventSourcing.Aggregates.AggregateDetails.Id"/> was already set.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.Aggregates.Exceptions.AggregateLockedException">
            <summary>
            Indicates the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> is in a locked state, and
            cannot be mofided or saved.
            </summary>
            <seealso cref="P:Purview.EventSourcing.Aggregates.AggregateDetails.Locked"/>
        </member>
        <member name="T:Purview.EventSourcing.DeleteHandlingMode">
            <summary>
            Controls how to handle aggregates in a deleted state during get and save/ restore operations.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.DeleteHandlingMode.ReturnsNull">
            <summary>
            If the aggregate is marked as deleted, returns null. This is the default.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.DeleteHandlingMode.ThrowsException">
            <summary>
            Should throw an exception.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.DeleteHandlingMode.ReturnsAggregate">
            <summary>
            Returns the aggregate in it's deleted state.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.EventStoreCacheOptions">
            <summary>
            Controls how and when the <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> is used, and how
            snapshots are cached during save operations.
            </summary>
            <seealso cref="T:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions"/>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreCacheOptions.Mode">
            <summary>
            Gets/ sets a value indicating how the <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/>
            uses the <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> during it's operations. Defaults to <see cref="F:Purview.EventSourcing.EventStoreCachingOptions.GetAndStore"/>.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.EventStoreCachingOptions">
            <summary>
            Controls how the cache is used in <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/> operations.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.EventStoreCachingOptions.None">
            <summary>
            Disables the cache completely.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.EventStoreCachingOptions.GetFromCache">
            <summary>
            Attempts to get snapshot from the cache, before using the underlaying storage.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.EventStoreCachingOptions.StoreInCache">
            <summary>
            Uses the cache for storing snapshots after a successful save operation.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.EventStoreCachingOptions.GetAndStore">
            <summary>
            Enables the cache for both <see cref="F:Purview.EventSourcing.EventStoreCachingOptions.GetFromCache"/> and <see cref="F:Purview.EventSourcing.EventStoreCachingOptions.StoreInCache"/>
            operations.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.EventStoreOperationContext">
            <summary>
            Options to influence Event Store operations.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.Default">
            <summary>
            Get or sets the default <see cref="T:Purview.EventSourcing.EventStoreOperationContext"/>, for
            when <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/> operations provide a null operational context.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.ValueAdapter">
            <summary>
            Gets/ sets the default <see cref="T:Purview.EventSourcing.Interfaces.Services.IEventValueAdapter"/>, set this to null
            to disable any event value adapters. Alternativly, set this is your own implementation.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.RequiredValidPrincipalIdentifierDefault">
            <summary>
            Gets/ sets the default value for <see cref="P:Purview.EventSourcing.EventStoreOperationContext.RequiredValidPrincipalIdentifier"/>.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.ValidateIdempotencyMarkerDefault">
            <summary>
            Gets or sets the default value for the <see cref="P:Purview.EventSourcing.EventStoreOperationContext.ValidateIdempotencyMarker"/>. Defaults to false.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.DeleteMode">
            <summary>
            Controls how to handle aggregates marked as deleted during get and save/ restore operations.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.LockMode">
            <summary>
            Controls how to handle aggregates marked as locked.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.CacheOptions">
            <summary>
            Manages caching operations for the event store.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.SkipSnapshot">
            <summary>
            If true, the event store will skip getting the snapshot and instead attempt to reconsitute the aggregate entirely from it's events.
            
            Otherwise, if the <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/> supports snapshots then a pre-reconsistuted may be retrieved.
            </summary>
            <remarks>This can be a slow operation.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.NotificationMode">
            <summary>
            Controls the notification mode when save, delete or restore operations occur.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.PermanentlyDelete">
            <summary>
            When false, aggregates are soft deleted. A platform event is added to mark the aggregate as deleted,
            and further save operations are forbidden. You can still get the aggregate by using the <see cref="P:Purview.EventSourcing.EventStoreOperationContext.DeleteMode"/> property
            and the <see cref="M:Purview.EventSourcing.Interfaces.IEventStore`1.RestoreAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)"/> operation.
            
            WARNING: If true, the aggregate and all of it's events and additional information are permanently deleted.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.ValidateIdempotencyMarker">
            <summary>
            Validates the idempotency marker from <see cref="T:Purview.Interfaces.Tracking.ICorrelationIdProvider"/> to see if the events have already been written.
            </summary>
            <remarks>If the marker exists, the call to <see cref="M:Purview.EventSourcing.Interfaces.IEventStore`1.SaveAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)"/> will return true without processing any of the events.
            
            In the case where this property is set to false, and the idempotency marker exists and internal exception is caught and ignored, and the operation requested will still set to true.
            
            If you're satisfied that the call is unique, then you can leave this as false (the default) for the sake of performance, otherwise set this to true.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.EventStoreOperationContext.RequiredValidPrincipalIdentifier">
            <summary>
            If true, a valid identifier must be returned from <see cref="M:Purview.Interfaces.Identity.IPrincipalService.Identifier"/> or
            an exception is thrown.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.ExistsState">
            <summary>
            The result of an exists operations on an aggregate. Is implicitly comparable to a <see cref="T:System.Boolean" />.
            </summary>
            <remarks>
            When converting to a <see cref="T:System.Boolean"/>, when the <see cref="P:Purview.EventSourcing.ExistsState.Status" /> is
            <see cref="F:Purview.EventSourcing.ExistsStatus.Exists"/> or <see cref="F:Purview.EventSourcing.ExistsStatus.ExistsInDeletedState"/>, true is returned.
            
            Otherwise, false is returned.
            </remarks>
        </member>
        <member name="M:Purview.EventSourcing.ExistsState.op_Implicit(Purview.EventSourcing.ExistsState)~System.Boolean">
            <summary>
            Implicitly converts a <see cref="T:Purview.EventSourcing.ExistsState"/> to a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="state">The value to convert.</param>
        </member>
        <member name="P:Purview.EventSourcing.ExistsState.DoesNotExists">
            <summary>
            Represents a value that indicates the aggregate does not exist.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.ExistsState.Exists">
            <summary>
            Represents a value that indicates the aggregate does exist.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.ExistsState.ExistsInDeletedState">
            <summary>
            Represents a value that indicates the aggregate exists, but is in a deleted state.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.ExistsState.DoesExist">
            <summary>
            If <see cref="P:Purview.EventSourcing.ExistsState.Status"/> is <see cref="F:Purview.EventSourcing.ExistsStatus.Exists"/>
            or <see cref="F:Purview.EventSourcing.ExistsStatus.ExistsInDeletedState"/>, then returns true.
            Otherwise, returns false.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.ExistsState.Status">
            <summary>
            Gets the <see cref="T:Purview.EventSourcing.ExistsStatus"/> of the aggregate exists result.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.ExistsState.Version">
            <summary>
            Gets the version of the aggregate if it exists, regardless of it's
            deleted state. 
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.ExistsState.Equals(Purview.EventSourcing.ExistsState)">
            <summary>
            Determines if this instance is equals to the <paramref name="other"/> instance.
            </summary>
            <param name="other">The instance to compare.</param>
            <returns>True if the instances are the same, otherwise false.</returns>
        </member>
        <member name="M:Purview.EventSourcing.ExistsState.Equals(System.Object)">
            <summary>
            Determines if this instance is equals to the <paramref name="obj"/> instance.
            </summary>
            <param name="obj">The instance to compare.</param>
            <returns>True if the instances are the same, otherwise false.</returns>
        </member>
        <member name="M:Purview.EventSourcing.ExistsState.GetHashCode">
            <summary>
            Generates a hashcode for this instance.
            </summary>
            <returns>A hash of this instance.</returns>
        </member>
        <member name="M:Purview.EventSourcing.ExistsState.ToBoolean">
            <summary>
            Converts this instance of a <see cref="T:Purview.EventSourcing.ExistsState"/> to a <see cref="T:System.Boolean"/>.
            </summary>
            <returns>Returns true if the <see cref="P:Purview.EventSourcing.ExistsState.Status"/> equals <see cref="F:Purview.EventSourcing.ExistsStatus.Exists"/>
            or <see cref="F:Purview.EventSourcing.ExistsStatus.ExistsInDeletedState"/>, otherwise returns false.</returns>
        </member>
        <member name="T:Purview.EventSourcing.ExistsStatus">
            <summary>
            Defines states for working out if an aggregate exists.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.ExistsStatus.DoesNotExists">
            <summary>
            The aggregate does not exist.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.ExistsStatus.Exists">
            <summary>
            The aggregate exists, and is not in a deleted state.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.ExistsStatus.ExistsInDeletedState">
            <summary>
            The aggregate exists, but is in a deleted state.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent">
            <summary>
            Represents details about an aggregate events, expressed through the
            <see cref="P:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent.Details"/> property.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent.Details">
            <summary>
            Gets the <see cref="T:Purview.EventSourcing.Aggregates.Events.AggregateEventDetails"/> representing
            information about the event on an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate">
            <summary>
            A chronological series of events, modifying state are they applied,
            in-order to represent a final state up until the last event applied.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Interfaces.Aggregates.IAggregate.Details">
            <summary>
            Gets the <see cref="T:Purview.EventSourcing.Aggregates.AggregateDetails"/> representing
            information about the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>.
            </summary>
            <remarks>Do not manually edit this instance or any of it's properties.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.Interfaces.Aggregates.IAggregate.AggregateType">
            <summary>
            This should represent a unique type name within your persistence layer.
            </summary>
            <remarks>Some implementations of the <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/> use this
            value a querying parameter.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.Aggregates.IAggregate.GetUnsavedEvents">
            <summary>
            Gets all of the currently unsaved <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/>s
            applied to this <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>.
            </summary>
            <returns>An array of the unsaved events.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.Aggregates.IAggregate.GetRegisteredEventTypes">
            <summary>
            Gets an array of the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> types
            that this <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> can apply.
            </summary>
            <returns>An array of event types.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.Aggregates.IAggregate.HasUnsavedEvents">
            <summary>
            Gets a value indicating if there are any unsaved events
            on this <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> instance.
            </summary>
            <returns>True if there are unsaved events, otherwise, false.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.Aggregates.IAggregate.ClearUnsavedEvents(System.Int32)">
            <summary>
            Clears any unsaved <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/>s passed the
            specified <paramref name="savedVersion"/> and resets the
            <see cref="P:Purview.EventSourcing.Aggregates.AggregateDetails.SavedVersion"/> to <paramref name="savedVersion"/>.
            </summary>
            <param name="savedVersion">The version (exclusive) of unsaved events to clear.</param>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.Aggregates.IAggregate.ApplyEvent(Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent)">
            <summary>
            Applies a <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> instance, either from
            a live update, or from a persisted store. Only registered event
            types should be used.
            
            Any aggregate-related properties on the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> instance
            should be reflected on the this instance.
            </summary>
            <param name="aggregateEvent">The event instance to apply.</param>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.Aggregates.IAggregate.CanApplyEvent(Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent)">
            <summary>
            Gets a value indicate if the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> type
            can be applied to this instance.
            </summary>
            <param name="aggregateEvent">The event being tested.</param>
            <returns>True if this instance can process this event, otherwise, false.</returns>
        </member>
        <member name="T:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedNotifier`1">
            <summary>
            Used by the <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/> to notify <see cref="T:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor"/>
            and <see cref="T:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor`1"/> implementations of save and delete
            operations.
            </summary>
            <typeparam name="T">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> type that was changed.</typeparam>
            <remarks>All registered <see cref="T:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor"/>s are included, but
            <see cref="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor.CanProcess(Purview.EventSourcing.Interfaces.Aggregates.IAggregate)"/> is called prior to calling the
            appropriate methods. 
            
            All registered <see cref="T:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedNotifier`1"/> are called called the non-specific versions.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedNotifier`1.BeforeSaveAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Notifiy all interested processors that a save operation is about to begin.
            </summary>
            <param name="aggregate">The aggregate that is going to be saved.</param>
            <param name="isNew">Indicates if the aggregate is new.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedNotifier`1.BeforeDeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Notifies all interested processors that a delete operation is about to begin.
            </summary>
            <param name="aggregate">The aggregate that is going to be deleted.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>This is not called if <see cref="P:Purview.EventSourcing.EventStoreOperationContext.PermanentlyDelete"/> is set to true.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedNotifier`1.AfterSaveAsync(`0,System.Int32,System.Boolean,Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent[],System.Threading.CancellationToken)">
            <summary>
            Notifies all interested processors that a save operation has completed successfully.
            </summary>
            <param name="aggregate">The newly saved aggregate.</param>
            <param name="previousSavedVersion">The aggregate version prior to being saved, if the aggregate is new then this will be 0 (zero).</param>
            <param name="isNew">Indicates if the aggregate was new.</param>
            <param name="events">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/>s that were saved as part of this operation.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedNotifier`1.AfterDeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Notifies all interested processors that a delete operation has completed successfully.
            </summary>
            <param name="aggregate">The deleted aggregate.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>This is not called if <see cref="P:Purview.EventSourcing.EventStoreOperationContext.PermanentlyDelete"/> is set to true.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedNotifier`1.FailureAsync(`0,System.Boolean,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Notifies all interested processors that a failure occured during a save or delete operation.
            </summary>
            <param name="aggregate">The aggregate for the failed operation.</param>
            <param name="isDelete">If true, the operation was a delete, otherwise, it was a save operation.</param>
            <param name="exception">The exception that occurred during the operation.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="T:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor">
            <summary>
            Allows the implementor to respond to before and after events
            of save, delete and failure operations.
            </summary>
            <remarks>All <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> types will be processed using this interface. 
            Use <see cref="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor.CanProcess(Purview.EventSourcing.Interfaces.Aggregates.IAggregate)"/> to indicate if you want to be included in a specific
            aggregates notification process.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor.CanProcess(Purview.EventSourcing.Interfaces.Aggregates.IAggregate)">
            <summary>
            Indicates if the <paramref name="aggregate"/> should be processed using the implementation.
            </summary>
            <param name="aggregate">The aggregate to test.</param>
            <returns>True to use the implementation to process notifications. Otherwise, false and no
            methods will be called.n</returns>
            <remarks>Has a default implementation that returns true.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor.BeforeSaveAsync(Purview.EventSourcing.Interfaces.Aggregates.IAggregate,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Called prior to the save operation being called on the aggregate.
            </summary>
            <param name="aggregate">The aggregate to be saved.</param>
            <param name="isNew">Indicates if the aggregate is new or it is an existing aggregate.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>Returns a <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor.AfterSaveAsync(Purview.EventSourcing.Interfaces.Aggregates.IAggregate,System.Int32,System.Boolean,Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent[],System.Threading.CancellationToken)">
            <summary>
            Called after the save operations has been successfully called on the aggregate.
            </summary>
            <param name="aggregate">The aggregate that was saved.</param>
            <param name="previousSavedVersion">The aggregate version prior to being saved, if the aggregate is new then this will be 0 (zero).</param>
            <param name="isNew">Indicates if the aggregate was new.</param>
            <param name="events">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/>s that were saved as part of this operation.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>Returns a <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor.BeforeDeleteAsync(Purview.EventSourcing.Interfaces.Aggregates.IAggregate,System.Threading.CancellationToken)">
            <summary>
            Called before the delete operation has completed.
            </summary>
            <param name="aggregate">The aggregate to be deleted.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>Returns a <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor.AfterDeleteAsync(Purview.EventSourcing.Interfaces.Aggregates.IAggregate,System.Threading.CancellationToken)">
            <summary>
            Called after the delete operation has completed successfully.
            </summary>
            <param name="aggregate">The aggregate that was deleted.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>Returns a <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor.FailureAsync(Purview.EventSourcing.Interfaces.Aggregates.IAggregate,System.Boolean,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called if the operation failurd during a save or delete operation.
            </summary>
            <param name="aggregate">The aggregate for the failed operation.</param>
            <param name="isDelete">If true, the operation was a delete, otherwise, it was a save operation.</param>
            <param name="exception">The exception that occurred during the operation.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>Returns a <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>.</remarks>
        </member>
        <member name="T:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor`1">
            <summary>
            Allows the implementor to respond to before and after events
            of save, delete and failure operations.
            </summary>
            <typeparam name="T">The specific <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> type used for notifications.</typeparam>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor`1.BeforeSaveAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Called prior to the save operation being called on the aggregate.
            </summary>
            <param name="aggregate">The aggregate to be saved.</param>
            <param name="isNew">Indicates if the aggregate is new or it is an existing aggregate.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>Returns a <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor`1.AfterSaveAsync(`0,System.Int32,System.Boolean,Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent[],System.Threading.CancellationToken)">
            <summary>
            Called prior to the save operation being called on the aggregate.
            </summary>
            <param name="aggregate">The aggregate to be saved.</param>
            <param name="previousSavedVersion">The aggregate version prior to being saved, if the aggregate is new then this will be 0 (zero).</param>
            <param name="isNew">Indicates if the aggregate is new or it is an existing aggregate.</param>
            <param name="events">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/>s that were saved as part of this operation.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>Returns a <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor`1.BeforeDeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Called before the delete operation has completed.
            </summary>
            <param name="aggregate">The aggregate to be deleted.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>Returns a <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor`1.AfterDeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Called after the delete operation has completed successfully.
            </summary>
            <param name="aggregate">The aggregate that was deleted.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>Returns a <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.ChangeFeed.IAggregateChangeFeedProcessor`1.FailureAsync(`0,System.Boolean,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Called if the operation failurd during a save or delete operation.
            </summary>
            <param name="aggregate">The aggregate for the failed operation.</param>
            <param name="isDelete">If true, the operation was a delete, otherwise, it was a save operation.</param>
            <param name="exception">The exception that occurred during the operation.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An awaitable task.</returns>
            <remarks>Returns a <see cref="P:System.Threading.Tasks.Task.CompletedTask"/>.</remarks>
        </member>
        <member name="T:Purview.EventSourcing.Interfaces.IEventStore`1">
            <summary>
            Stores <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> data as a series of events, allowing for pull
            or partial reconstitution of the state at any given point in its history.
            </summary>
            <typeparam name="T">An <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> implementation.</typeparam>
            <seealso cref="T:Purview.EventSourcing.Interfaces.IQueryableEventStore`1"/>
            <seealso cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IEventStore`1.CreateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> of <typeparamref name="T"/> with the given <paramref name="id"/> as it's Id.
            
            If <paramref name="id"/> is not valid, then <see cref="M:Purview.EventSourcing.Interfaces.Services.IAggregateIdFactory.CreateAsync``1(System.Threading.CancellationToken)"/>
            is called to generate a new id based on the <typeparamref name="T"/> provided.
            </summary>
            <param name="id">Optional, the Id of the <typeparamref name="T">aggregate.</typeparamref>.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>A new <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IEventStore`1.GetOrCreateAsync(System.String,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)">
            <summary>
            Attempts to get the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> of <typeparamref name="T"/> based on the <paramref name="id"/>.
            
            If the id is not valid (null, empty or whitespace for example), or the aggregate does not exist,
            a call to <see cref="M:Purview.EventSourcing.Interfaces.IEventStore`1.CreateAsync(System.String,System.Threading.CancellationToken)"/> is
            made to attempt to create a new aggregate with the either the specified id or a generated one.
            </summary>
            <param name="id">Optional, the id of the aggregate to get, or used as the id of the aggregate to create.</param>
            <param name="operationContext">The operational context, controlling things such as if and when exceptions are thrown.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>A existing or new aggregate, or null.</returns>
            <remarks>Null can be returned if the aggregate exists, but is in a deleted state. This is controlled by the <paramref name="operationContext"/>.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IEventStore`1.GetAsync(System.String,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> of <typeparamref name="T"/> based on the given <paramref name="id"/>.
            </summary>
            <param name="id">The id of the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>.</param>
            <param name="operationContext">The <see cref="T:Purview.EventSourcing.EventStoreOperationContext"/> that controls how the aggregate is retrieved.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>The requested <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> of <typeparamref name="T"/> based on the <paramref name="id"/>, or null.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IEventStore`1.GetAtAsync(System.String,System.Int32,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> of <typeparamref name="T"/> based on the given <paramref name="id"/>, up to a specific version.
            </summary>
            <param name="id">The id of the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>.</param>
            <param name="version">The version of the aggregate to get.</param>
            <param name="operationContext">The <see cref="T:Purview.EventSourcing.EventStoreOperationContext"/> that controls how the aggregate is retrieved.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>The requested <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> of <typeparamref name="T"/> based on the <paramref name="id"/>, or null.</returns>
            <remarks>The resulting aggregate, if any, will be in a locked state preventing any modifications.
            
            This includes applying new events, or attempting to save, delete or restore the aggregate.
            </remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IEventStore`1.SaveAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)">
            <summary>
            Saves the given <paramref name="aggregate"/>.
            </summary>
            <param name="aggregate">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> to save.</param>
            <param name="operationContext">The <see cref="T:Purview.EventSourcing.EventStoreOperationContext"/> that controls how the aggregate is saved.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>An <see cref="T:Purview.EventSourcing.Aggregates.AggregateSaveResult`1"/> detailing the result of the save operation.</returns>
            <remarks>The underlygin persistence store should ensure that no existing events are overitten, and
            the events and additional data are persisted in a transactional way.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IEventStore`1.IsDeletedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Determines if the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> of type <typeparamref name="T"/> as specified by <paramref name="id"/> exists 
            in the deleted state.
            </summary>
            <param name="id">The Id of the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> to check.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>Returns true if the aggregate exists in the deleted state, otherwise, returns false.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IEventStore`1.GetDeletedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> of <typeparamref name="T"/> given the specified <paramref name="id"/>.
            </summary>
            <param name="id">The Id of the deleted aggregate to get.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>If the aggregate is not found, returns null. If the aggregate was found, but is not deleted am 
            exception is thrown. Otherwise, returns the aggregate.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IEventStore`1.DeleteAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)">
            <summary>
            Deletes an <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> from the store.
            </summary>
            <param name="aggregate">The aggregate to delete.</param>
            <param name="operationContext">The <see cref="T:Purview.EventSourcing.EventStoreOperationContext"/> that controls how the aggregate is deleted.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>Indicates if the operation successfully deleted the aggregate.</returns>
            <remarks>If the <see cref="P:Purview.EventSourcing.EventStoreOperationContext.PermanentlyDelete"/> is true, the aggregate and all
            of it's associated data is permanently deleted. If false (the default), the aggregate is soft-deleted.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IEventStore`1.RestoreAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)">
            <summary>
            Restores a previously deleted <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>.
            </summary>
            <param name="aggregate">The aggregate to restore, usually obtained from <see cref="M:Purview.EventSourcing.Interfaces.IEventStore`1.GetDeletedAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="operationContext">The <see cref="T:Purview.EventSourcing.EventStoreOperationContext"/> that controls how the aggregate is restored.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>Returns true if the aggregate was successfully restored, otherwise, false.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IEventStore`1.GetAggregateIdsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the aggregate Id, depending
            on the <paramref name="includeDeleted"/> parameter.
            </summary>
            <param name="includeDeleted">Indicates if the results should contain soft-deleted aggregates or not.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>The aggregate Id availabe.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IEventStore`1.ExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Determines if the aggregate specified exists. This includes checking deleted states.
            </summary>
            <param name="id">The id of the aggregate to check.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>A <see cref="T:Purview.EventSourcing.ExistsState"/> that determines the existance (in either a deleted or non-deleted state),
            or if it exists at all. If the aggregate does exist, it's version is also returned.</returns>
        </member>
        <member name="T:Purview.EventSourcing.Interfaces.IQueryableEventStore`1">
            <summary>
            Provides querying and sorting operations to a <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/>.
            </summary>
            <typeparam name="T">An <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> implementation.</typeparam>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IQueryableEventStore`1.GetQueryEnumerableAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Queries aggregates in the event store as an enumerable stream, given a <paramref name="whereClause">where expression</paramref>.
            </summary>
            <param name="whereClause">The <see cref="T:System.Linq.Expressions.Expression`1"/> predicate used for filtering.</param>
            <param name="orderByClause">Optional, the <see cref="T:System.Func`2"/> used for ordering operations.</param>
            <param name="maxRecordsPerIteration">The maximum number of records to return per-iterantion.</param>
            <param name="cancellationToken">A stopping token.</param>
            <returns>A paged result set of <typeparamref name="T"/>.</returns>
            <remarks>The <paramref name="whereClause"/> and <paramref name="orderByClause"/> are limited by the underlying LINQ-based implementation.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IQueryableEventStore`1.GetListEnumerableAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Lists aggregates in the event store as an enumerable stream.
            </summary>
            <param name="orderByClause">Optional, the <see cref="T:System.Func`2"/> used for ordering operations.</param>
            <param name="maxRecordsPerIteration">The maximum number of records to return per-iterantion.</param>
            <param name="cancellationToken">A stopping token.</param>
            <returns>A paged result set of <typeparamref name="T"/>.</returns>
            <remarks>The <paramref name="orderByClause"/> is limited by the underlying LINQ-based implementation.</remarks>
            <seealso cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IQueryableEventStore`1.QueryAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},Purview.Interfaces.Storage.ContinuationRequest,System.Threading.CancellationToken)">
            <summary>
            Queries aggregates in the event store given a <paramref name="whereClause">where expression</paramref>.
            </summary>
            <param name="whereClause">The <see cref="T:System.Linq.Expressions.Expression`1"/> predicate used for filtering.</param>
            <param name="orderByClause">Optional, the <see cref="T:System.Func`2"/> used for ordering operations.</param>
            <param name="request">A <see cref="T:Purview.Interfaces.Storage.ContinuationRequest"/> that defines things like the <see cref="P:Purview.Interfaces.Storage.ContinuationRequest.MaxRecords"/>.</param>
            <param name="cancellationToken">A stopping token.</param>
            <returns>A paged result set of <typeparamref name="T"/>.</returns>
            <remarks>The <paramref name="whereClause"/> and <paramref name="orderByClause"/> are limited by the underlying LINQ-based implementation.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IQueryableEventStore`1.ListAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},Purview.Interfaces.Storage.ContinuationRequest,System.Threading.CancellationToken)">
            <summary>
            Lists aggregates in the event store.
            </summary>
            <param name="orderByClause">Optional, the <see cref="T:System.Func`2"/> used for ordering operations.</param>
            <param name="request">A <see cref="T:Purview.Interfaces.Storage.ContinuationRequest"/> that defines things like the <see cref="P:Purview.Interfaces.Storage.ContinuationRequest.MaxRecords"/>.</param>
            <param name="cancellationToken">A stopping token.</param>
            <returns>A paged result set of <typeparamref name="T"/>.</returns>
            <remarks>The <paramref name="orderByClause"/> is limited by the underlying LINQ-based implementation.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IQueryableEventStore`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Counts the aggregates in the event store given a <paramref name="whereClause">where expression</paramref>.
            </summary>
            <param name="whereClause">The <see cref="T:System.Linq.Expressions.Expression`1"/> predicate used for filtering.</param>
            <param name="cancellationToken">A stopping token.</param>
            <returns>A count of the aggregates matching the <paramref name="whereClause"/>.</returns>
            <remarks>The result and the <paramref name="whereClause"/> are limited by the underlying LINQ-based implementation.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IQueryableEventStore`1.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Queries for a single aggregate in the event store given a <paramref name="whereClause">where expression</paramref>.
            </summary>
            <param name="whereClause">The <see cref="T:System.Linq.Expressions.Expression`1"/> predicate used for filtering.</param>
            <param name="cancellationToken">A stopping token.</param>
            <returns>A single aggregate, or null.</returns>
            <remarks>The <paramref name="whereClause"/> are limited by the underlying LINQ-based implementation.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.IQueryableEventStore`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},System.Threading.CancellationToken)">
            <summary>
            Queries for the first aggregate in the event store given a <paramref name="whereClause">where expression</paramref> and,
            optionally, a <paramref name="orderByClause"/>.
            </summary>
            <param name="whereClause">The <see cref="T:System.Linq.Expressions.Expression`1"/> predicate used for filtering.</param>
            <param name="orderByClause">Optional, the <see cref="T:System.Func`2"/> used for ordering operations.</param>
            <param name="cancellationToken">A stopping token.</param>
            <returns>The first aggregate found, or null.</returns>
            <remarks>The <paramref name="whereClause"/> and <paramref name="orderByClause"/> are limited by the underlying LINQ-based implementation.</remarks>
        </member>
        <member name="T:Purview.EventSourcing.Interfaces.Services.IAggregateIdFactory">
            <summary>
            Generates new Ids for <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>s.
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.Services.IAggregateIdFactory.CreateAsync``1(System.Threading.CancellationToken)">
            <summary>
            Generates a new id for the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> of type <typeparamref name="T"/>.
            
            The implementation has the opportunity to check existing stores or lookup ids from an external source.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>.</typeparam>
            <param name="cancellationToken">A stopping token.</param>
            <returns>A new, ideally unique, id.</returns>
        </member>
        <member name="T:Purview.EventSourcing.LockHandlingMode">
            <summary>
            Controls how to handle aggregates in a locked state with save operations.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.LockHandlingMode.ThrowsException">
            <summary>
            If the aggregate is marked as locked, save operations throw an exception. This is the default.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.LockHandlingMode.ReturnsFalse">
            <summary>
            If the aggregate is marked as locked, save operations return false.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.NotificationModes">
            <summary>
            Controls have notifications are handled for aggregate save operations.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.NotificationModes.None">
            <summary>
            No notifications are generated.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.NotificationModes.BeforeSave">
            <summary>
            Notifications are generated before saving occurs.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.NotificationModes.AfterSave">
            <summary>
            Notifications are generated after save.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.NotificationModes.BeforeDelete">
            <summary>
            Notifications are generated before delete.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.NotificationModes.AfterDelete">
            <summary>
            Notifications are generated after delete.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.NotificationModes.OnFailure">
            <summary>
            Notifications are generated when there is a failure to perform an operation.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.NotificationModes.BeforeSaveOrDelete">
            <summary>
            Notifications are generated before save and delete.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.NotificationModes.AfterSaveOrDelete">
            <summary>
            Notifications are generated after save and delete.
            </summary>
        </member>
        <member name="F:Purview.EventSourcing.NotificationModes.All">
            <summary>
            Notifications are generated before saving and deleting, after saving or deleting and in the case of failure.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Options.EventStoreSettings.RegisterNullQueryStore">
            <summary>
            Set this to true to register an empty <see cref="T:Purview.EventSourcing.Interfaces.IQueryableEventStore`1"/>, that will
            still operate as the system registered <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/>.
            
            False means you are in-case of registring an implementaiton.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.Services.DefaultAggregateValidator">
            <summary>
            A default validator for <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>'s based on
            standard data annotations.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.Services.DefaultAggregateValidator.Instance">
            <summary>
            A statically cached instance based on the use of standard data annotations.
            </summary>
        </member>
        <member name="T:Purview.EventSourcing.Services.DefaultEventValueAdapter">
            <summary>
            Default <see cref="T:Purview.EventSourcing.Interfaces.Services.IEventValueAdapter"/> used for adapting event values prior to
            updating an aggregate.
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.Services.DefaultEventValueAdapter.Adapt``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Adapts an event value prior to setting the aggregate's property.
            </summary>
            <typeparam name="TAggregate">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> type.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <typeparam name="TEvent">The type of the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> to be created.</typeparam>
            <param name="propertyExpression">An expression for the aggregate's property.</param>
            <param name="proposedValue">The proposed value from an event.</param>
            <returns>An updated <paramref name="proposedValue"/>, or untouched if no changes were required.</returns>
        </member>
        <member name="T:Purview.EventSourcing.Services.EventSourcingModule">
            <summary>
            Registers the core event sourcing services.
            </summary>
        </member>
        <member name="T:Purview.IAggregateExtensions">
            <summary>
            Extensions for <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> and <see cref="T:Purview.EventSourcing.Aggregates.AggregateBase"/>.
            </summary>
        </member>
        <member name="M:Purview.IAggregateExtensions.Id(Purview.EventSourcing.Interfaces.Aggregates.IAggregate)">
            <summary>
            Helper method that gets the <see cref="P:Purview.EventSourcing.Aggregates.AggregateDetails.Id"/> from
            the <see cref="P:Purview.EventSourcing.Interfaces.Aggregates.IAggregate.Details" /> property.
            </summary>
            <param name="aggregate">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>.</param>
            <returns>The <see cref="P:Purview.EventSourcing.Aggregates.AggregateDetails.Id"/> from the <see cref="P:Purview.EventSourcing.Interfaces.Aggregates.IAggregate.Details"/> property.</returns>
        </member>
        <member name="M:Purview.IAggregateExtensions.IsNew(Purview.EventSourcing.Interfaces.Aggregates.IAggregate)">
            <summary>
            Determines if the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> instance is new,
            i.e. unsave.
            </summary>
            <param name="aggregate">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> to check.</param>
            <returns>Returns true if the <see cref="P:Purview.EventSourcing.Aggregates.AggregateDetails.SavedVersion"/> is 0, zero. Otherwise, returns false.</returns>
        </member>
        <member name="M:Purview.IAggregateExtensions.CompareRecordAndApply``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Func{``1,``2})">
            <summary>
            Similar to <see cref="M:Purview.EventSourcing.Aggregates.AggregateBase.RecordAndApply``1(``0)"/> using property expressions and the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>
            to see if an event should be raised.
            
            If the equality comparison fails, the <paramref name="proposedValue"/> is adapted via the
            <see cref="P:Purview.EventSourcing.EventStoreOperationContext.ValueAdapter"/> (if it's not null) and then the <typeparamref name="TEvent"/> is
            created via the <paramref name="eventCreator"/>.
            
            Finally the resulting event is applied via <see cref="M:Purview.EventSourcing.Aggregates.AggregateBase.RecordAndApply``1(``0)"/>.
            </summary>
            <typeparam name="TAggregate">The <see cref="T:Purview.EventSourcing.Aggregates.AggregateBase"/> type.</typeparam>
            <typeparam name="TPropertyType">The type of the property on the <typeparamref name="TAggregate"/>.</typeparam>
            <typeparam name="TEvent">The type of <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/> to create.</typeparam>
            <param name="aggregate">The <typeparamref name="TAggregate"/> instance.</param>
            <param name="aggregatePropertyExpression">An expression to the property to update.</param>
            <param name="proposedValue">The new value of the property.</param>
            <param name="eventCreator">Creates a new <typeparamref name="TEvent"/> with the <paramref name="proposedValue"/>.</param>
            <returns>The <paramref name="aggregate"/>.</returns>
        </member>
        <member name="M:Purview.IEventStoreExtensions.QuickCreate``1(Purview.EventSourcing.Interfaces.IEventStore{``0},System.String)">
            <summary>
            Creates a new <typeparamref name="T"/>, but will not call <see cref="M:Purview.EventSourcing.Interfaces.Services.IAggregateIdFactory.CreateAsync``1(System.Threading.CancellationToken)"/>
            to create a new Id. It will take the <paramref name="id"/> parameter, or the id parameter is null or empty 
            use a new lowered <see cref="T:System.Guid"/>.
            </summary>
            <param name="eventStore">The <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/> used as the root object.</param>
            <typeparam name="T">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> to create.</typeparam>
            <param name="id">The id to use, or null with either the specified or a generated id.</param>
            <returns>A new aggregate of <typeparamref name="T"/>.</returns>
        </member>
    </members>
</doc>
