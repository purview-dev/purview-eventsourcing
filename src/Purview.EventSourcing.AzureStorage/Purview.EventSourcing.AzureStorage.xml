<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Purview.EventSourcing.AzureStorage</name>
    </assembly>
    <members>
        <member name="P:Purview.EventSourcing.AzureStorage.Entities.StreamVersionEntity.Version">
            <summary>
            This is the most recently saved version of the aggregate.
            </summary>
        </member>
        <member name="M:Purview.EventSourcing.AzureStorage.Events.BlobPointerEvent.BuildEventHash(System.HashCode@)">
            <inheritdoc />
        </member>
        <member name="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.DefaultSnapshotInterval">
            <summary>
            Defines the default snapshot interval, when not set in configuration.
            Defaults to 1, which means snapshot when at least 1 event is saved.
            </summary>
            <seealso cref="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.SnapshotInterval"/>
        </member>
        <member name="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.Container">
            <summary>
            Optional. Container name used to create the blob container for storing snapshops
            and large events.
            
            If this value is missing, a <see cref="T:Purview.EventSourcing.AzureStorage.Options.BlobEventStoreConfiguration"/> will be resolved.
            </summary>
            <remarks>NOTE: When using this shortcut property,
            the same <see cref="P:Purview.Options.Storage.ConnectionStringSettingBase.ConnectionString"/> will be shared
            between Table and Blob clients.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.SnapshotInterval">
            <summary>
            Indicates when a snapshot is made of the aggregate, based on the number of events
            applied during a <see cref="M:Purview.EventSourcing.Interfaces.IEventStore`1.SaveAsync(`0,Purview.EventSourcing.EventStoreOperationContext,System.Threading.CancellationToken)"/> operation.
            
            The default is 1, so a snapshot is made for any change.
            </summary>
            <remarks>The default can be changed statically by setting the <see cref="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.DefaultSnapshotInterval"/>.</remarks>
            <see cref="T:Purview.EventSourcing.Interfaces.IEventStore`1"/>
        </member>
        <member name="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.RemoveDeletedFromCache">
            <summary>
            Indicates if a deleted agggregate is removed from cache. Defaults to true.
            
            If true, when an aggregate is deleted, it is removed from the cache.
            Or in the case of a get, it is not placed in cache for future calls.
            
            If false, a deleted aggregate can be placed into cache. 
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.EventPrefix">
            <summary>
            Sets the suffix for writing events.
            </summary>
            <remarks>Changing this where data already exists will result in incomplete aggregates.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.EventSuffixLength">
            <summary>
            The length of the suffix when creating event records.
            </summary>
            <remarks>Changing this where data already exists will result in incomplete aggregates.</remarks>
        </member>
        <member name="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.Caching">
            <summary>
            Caching options for controlling how and when to use the <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/>
            for storing and retrieving snapshots.
            </summary>
        </member>
        <member name="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.RequiresValidPrincipalIdentifier">
            <summary>
            Gets/ sets a value indicating if a valid identifier from a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> is required when
            saving aggregates.
            
            Sets the <see cref="P:Purview.EventSourcing.EventStoreOperationContext.RequiredValidPrincipalIdentifier"/> to this value
            on the <see cref="P:Purview.EventSourcing.EventStoreOperationContext.Default"/> property.
            </summary>
            <remarks>If true and <see cref="M:Purview.Interfaces.Identity.IPrincipalService.Identifier"/> returns null or empty string, an exception is thrown.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.ToBlobConfig">
            <summary>
            To save additional configuration entries, you can use either the <see cref="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.Container"/> property or the <see cref="M:Purview.EventSourcing.Interfaces.AzureStorage.ITableEventStoreStorageNameBuilder.GetBlobContainerName``1"/> 
            to specify that this <see cref="T:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration"/> instance can be used to create a valid <see cref="T:Purview.EventSourcing.AzureStorage.Options.BlobEventStoreConfiguration"/>.
            </summary>
            <returns>A <see cref="T:Purview.EventSourcing.AzureStorage.Options.BlobEventStoreConfiguration"/> based on the <see cref="P:Purview.Options.Storage.ConnectionStringSettingBase.ConnectionString"/> and <see cref="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.Container"/>.</returns>
            <remarks>If the <see cref="P:Purview.EventSourcing.AzureStorage.Options.TableEventStoreConfiguration.Container"/> property is not valid however, be aware the resulting <see cref="T:Purview.EventSourcing.AzureStorage.Options.BlobEventStoreConfiguration"/> maybe invalid.</remarks>
        </member>
        <member name="M:Purview.EventSourcing.AzureStorage.TableEventStore`1.GetEventRangeAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a range of <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.Events.IAggregateEvent"/>s for a given aggregate, as specified by it's <paramref name="aggregateId"/>.
            </summary>
            <param name="aggregateId">The id of the <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/>.</param>
            <param name="versionFrom">The inclusive event number to start the range at.</param>
            <param name="versionTo">Optional, the inclusive event number to finish the range at.</param>
            <param name="cancellationToken">The stopping token.</param>
            <returns>If no <paramref name="versionFrom"/> is specified all available events greater than <paramref name="versionFrom"/> are returned.</returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.AzureStorage.ITableEventStoreStorageNameBuilder.GetBlobContainerName``1">
            <summary>
            Generates the container name used to store aggregate snapshots in.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Purview.EventSourcing.Interfaces.AzureStorage.ITableEventStoreStorageNameBuilder.GetTableName``1">
            <summary>
            Generate the name of table to use for storing the events and other data assocaited with the <see cref="T:Purview.EventSourcing.Interfaces.AzureStorage.ITableEventStore`1"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Purview.EventSourcing.Interfaces.Aggregates.IAggregate"/> type to generate the name for.</typeparam>
            <returns>An azure storage table name.</returns>
            <remarks>
            Examples would be to use the pre-existing configuration to generate a name unique to the process and aggregate.
            
            For example, if this was a microservice (the process) was Sample.API and the <typeparamref name="T"/> was DemoAggregate, then a
            comment sense approach would be to generate the table name one of the following:
            * ESSampleAPIDemoAggregate
            * SampleAPIEventStoreDemoAggregate
            * SampleAPIDemoAggregateEventStore
            
            Each option has positives and negatives, usually regarding their logical grouping.
            </remarks>
        </member>
    </members>
</doc>
